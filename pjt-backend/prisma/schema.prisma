generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String?
  businessName   String?
  phone          String?
  avatar         String?
  role           String          @default("ADMIN")
  isSuperAdmin   Boolean         @default(false)
  createdAt      DateTime        @default(now())
  branches       Branch[]
  services       Service[]
  stockMovements StockMovement[]
}

model Branch {
  id                    String                 @id @default(uuid())
  name                  String
  address               String?
  phone                 String?
  logo                  String?
  isActive              Boolean                @default(true)
  ownerId               String
  createdAt             DateTime               @default(now())
  appointments          Appointment[]
  owner                 User                   @relation(fields: [ownerId], references: [id])
  clients               Client[]
  expenseCategories     ExpenseCategory[]
  financialTransactions FinancialTransaction[]
  products              Product[]
  professionals         Professional[]
  recurringExpenses     RecurringExpense[]
  roles                 Role[]
  services              Service[]
  stockMovements        StockMovement[]
  whatsappConfigs       WhatsAppConfig[]
  whatsappConversations WhatsAppConversation[]
  whatsappMessages      WhatsAppMessage[]
}

model Role {
  id             String         @id @default(uuid())
  title          String
  commissionRate Decimal        @default(0) @db.Decimal(5, 2)
  baseSalary     Decimal?       @db.Decimal(10, 2)
  salaryPayDay   Int?
  branchId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  professionals  Professional[]
  branch         Branch         @relation(fields: [branchId], references: [id])
}

model Professional {
  id                String             @id @default(uuid())
  name              String
  role              String
  active            Boolean            @default(true)
  commissionRate    Decimal            @default(0) @db.Decimal(5, 2)
  roleId            String?
  branchId          String
  appointments      Appointment[]
  branch            Branch             @relation(fields: [branchId], references: [id])
  customRole        Role?              @relation(fields: [roleId], references: [id])
  recurringExpenses RecurringExpense[]
  services          Service[]          @relation("ProfessionalServices")
}

model Service {
  id                  String               @id @default(uuid())
  name                String
  price               Decimal              @db.Decimal(10, 2)
  branchId            String?
  ownerId             String
  appointmentServices AppointmentService[]
  branch              Branch?              @relation(fields: [branchId], references: [id])
  owner               User                 @relation(fields: [ownerId], references: [id])
  professionals       Professional[]       @relation("ProfessionalServices")
}

model Client {
  id           String        @id @default(uuid())
  name         String
  phone        String?
  email        String?
  branchId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  branch       Branch        @relation(fields: [branchId], references: [id])
}

model Appointment {
  id                     String                 @id @default(uuid())
  professionalId         String?
  clientId               String
  branchId               String
  total                  Decimal                @db.Decimal(10, 2)
  scheduledAt            DateTime
  status                 AppointmentStatus      @default(SCHEDULED)
  createdAt              DateTime               @default(now())
  branch                 Branch                 @relation(fields: [branchId], references: [id])
  client                 Client                 @relation(fields: [clientId], references: [id])
  professional           Professional?          @relation(fields: [professionalId], references: [id], onDelete: Restrict)
  appointmentServices    AppointmentService[]
  commissionTransactions FinancialTransaction[]
}

model AppointmentService {
  appointmentId String
  serviceId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])

  @@id([appointmentId, serviceId])
}

model Product {
  id             String          @id @default(uuid())
  name           String
  sku            String?
  description    String?
  category       String
  brand          String?
  barcode        String?         @unique
  costPrice      Decimal         @db.Decimal(10, 2)
  salePrice      Decimal?        @db.Decimal(10, 2)
  currentStock   Int             @default(0)
  minStock       Int             @default(0)
  maxStock       Int?
  unit           String          @default("un")
  isActive       Boolean         @default(true)
  branchId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  branch         Branch          @relation(fields: [branchId], references: [id])
  stockMovements StockMovement[]
}

model StockMovement {
  id        String            @id @default(uuid())
  productId String
  branchId  String
  userId    String?
  type      StockMovementType
  quantity  Int
  unitCost  Decimal?          @db.Decimal(10, 2)
  totalCost Decimal?          @db.Decimal(10, 2)
  reason    String?
  reference String?
  createdAt DateTime          @default(now())
  branch    Branch            @relation(fields: [branchId], references: [id])
  product   Product           @relation(fields: [productId], references: [id])
  user      User?             @relation(fields: [userId], references: [id])
}

model ExpenseCategory {
  id                String                   @id @default(uuid())
  name              String
  type              FinancialTransactionType
  color             String                   @default("#6B7280")
  description       String?
  branchId          String
  createdAt         DateTime                 @default(now())
  branch            Branch                   @relation(fields: [branchId], references: [id])
  transactions      FinancialTransaction[]
  recurringExpenses RecurringExpense[]
}

model FinancialTransaction {
  id                 String                   @id @default(uuid())
  description        String
  amount             Decimal                  @db.Decimal(10, 2)
  type               FinancialTransactionType
  categoryId         String
  paymentMethod      PaymentMethod            @default(CASH)
  reference          String?
  recurringExpenseId String?
  appointmentId      String?
  date               DateTime                 @default(now())
  branchId           String
  createdAt          DateTime                 @default(now())
  appointment        Appointment?             @relation(fields: [appointmentId], references: [id])
  branch             Branch                   @relation(fields: [branchId], references: [id])
  category           ExpenseCategory          @relation(fields: [categoryId], references: [id])
  recurringExpense   RecurringExpense?        @relation(fields: [recurringExpenseId], references: [id])
}

model RecurringExpense {
  id             String                 @id @default(uuid())
  name           String
  description    String?
  categoryId     String
  fixedAmount    Decimal?               @db.Decimal(10, 2)
  receiptDay     Int
  dueDay         Int
  professionalId String?
  isActive       Boolean                @default(true)
  branchId       String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  transactions   FinancialTransaction[]
  branch         Branch                 @relation(fields: [branchId], references: [id])
  category       ExpenseCategory        @relation(fields: [categoryId], references: [id])
  professional   Professional?          @relation(fields: [professionalId], references: [id])
}

model WhatsAppConfig {
  id                 String   @id @default(uuid())
  branchId           String
  accountSid         String
  authTokenEncrypted String
  whatsappNumber     String
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  branch             Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

model WhatsAppMessage {
  id         String   @id @default(uuid())
  branchId   String
  messageSid String   @unique
  from       String
  to         String
  body       String
  status     String
  direction  String
  createdAt  DateTime @default(now())
  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
}

model WhatsAppConversation {
  id            String   @id @default(uuid())
  branchId      String
  phoneNumber   String
  currentStep   String   @default("GREETING")
  selectedData  Json?
  lastMessageAt DateTime @default(now())
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  branch        Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([branchId, phoneNumber])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  LOSS
}

enum FinancialTransactionType {
  INCOME
  EXPENSE
  INVESTMENT
}

enum PaymentMethod {
  CASH
  CARD
  PIX
  TRANSFER
  OTHER
}
